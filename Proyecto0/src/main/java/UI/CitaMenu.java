/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.Locale;
import java.util.Map;

import javax.swing.JOptionPane;

import Control.Control;
import Model.Servicio;

/**
 *
 * @author Gabriel
 */
public class CitaMenu extends javax.swing.JPanel {

    Control control = Control.getInstance();

    /**
     * Creates new form CitaMenu
     */
    public CitaMenu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        InsButton = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        InsCitaButton = new javax.swing.JButton();
        DelCitaButton = new javax.swing.JButton();
        ModCitaButton = new javax.swing.JButton();
        ConsCitaButton = new javax.swing.JButton();
        ConfCitaButton = new javax.swing.JButton();
        CalCitaButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        InsButton.setBackground(new java.awt.Color(19, 23, 25));
        InsButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        InsButton.setForeground(new java.awt.Color(177, 177, 177));
        InsButton.setText("Ingresar Cliente");

        setBackground(new java.awt.Color(51, 51, 51));

        BackButton.setBackground(new java.awt.Color(19, 23, 25));
        BackButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        BackButton.setForeground(new java.awt.Color(177, 177, 177));
        BackButton.setText("Atrás");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        InsCitaButton.setBackground(new java.awt.Color(19, 23, 25));
        InsCitaButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        InsCitaButton.setForeground(new java.awt.Color(177, 177, 177));
        InsCitaButton.setText("Ingresar Cita");

        InsCitaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Solicitar la fecha
                    String fechaStr = JOptionPane.showInputDialog("Ingrese la fecha en formato YYYY-MM-DD:");
                    LocalDate fecha = LocalDate.parse(fechaStr);
            
                    // Solicitar la hora
                    String horaStr = JOptionPane.showInputDialog("Ingrese la hora (solo se permiten horas completas o medias, por ejemplo, 7:00 AM o 7:30 PM):");
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a", Locale.ENGLISH);
                    LocalTime hora = LocalTime.parse(horaStr, formatter);
            
                    // Validar que la hora sea correcta
                    if (hora.getMinute() != 0 && hora.getMinute() != 30) {
                        JOptionPane.showMessageDialog(null, "La hora ingresada no es válida. Solo se permiten horas completas o medias (por ejemplo, 7:00 o 7:30).");
                        return;
                    }
            
                    // Mostrar la lista de clientes y solicitar el número de teléfono
                    String listaClientes = control.listaClientes().toString();
                    String telefonoCliente = JOptionPane.showInputDialog("Lista de clientes disponibles: \n" + listaClientes + "\nIngrese el número de teléfono del cliente:");
            
                    // Mostrar la lista de servicios y solicitar el tipo de servicio
                    String listaServicios = control.listaServicio().toString();
                    String tipoElegido = JOptionPane.showInputDialog("Lista de servicios disponibles: \n" + listaServicios + "\nIngrese el tipo de servicio:");
            
                    // Llamar al método crearCita
                    control.crearCita(fecha, hora, telefonoCliente, tipoElegido);
        
                    // Mostrar mensaje de confirmación
                    JOptionPane.showMessageDialog(null, "La cita ha sido agregada exitosamente.");
                } catch (DateTimeParseException e) {
                    JOptionPane.showMessageDialog(null, "La fecha o la hora ingresada no es válida. Por favor, intente de nuevo.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al crear la cita. Por favor, intente de nuevo.");
                }
            }
        });

        DelCitaButton.setBackground(new java.awt.Color(19, 23, 25));
        DelCitaButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        DelCitaButton.setForeground(new java.awt.Color(177, 177, 177));
        DelCitaButton.setText("Borrar Cita");

        DelCitaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Mostrar la lista de citas y solicitar el número de cita
                    String listaCitas = control.listaCitas().toString();
                    String numeroCitaStr = JOptionPane.showInputDialog("Lista de citas disponibles: \n" + listaCitas + "\nIngrese el número de la cita que desea borrar:");
                    
                    // Convertir el número de cita a int
                    int numeroCita = Integer.parseInt(numeroCitaStr);
                
                    // Llamar al método borrarCita
                    control.borrarCita(numeroCita);
        
                    // Mostrar mensaje de confirmación
                    JOptionPane.showMessageDialog(null, "La cita ha sido borrada exitosamente.");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al borrar la cita. Por favor, intente de nuevo.");
                }
            }
        });

        ModCitaButton.setBackground(new java.awt.Color(19, 23, 25));
        ModCitaButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        ModCitaButton.setForeground(new java.awt.Color(177, 177, 177));
        ModCitaButton.setText("Modificar Cita");

        ModCitaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Mostrar la lista de citas y solicitar el número de cita
                    String listaCitas = control.listaCitas().toString();
                    String numeroCitaStr = JOptionPane.showInputDialog("Lista de citas disponibles: \n" + listaCitas + "\nIngrese el número de la cita que desea modificar:");
                    
                    // Convertir el número de cita a int
                    int numeroCita = Integer.parseInt(numeroCitaStr);
        
                    // Solicitar la fecha
                    String fechaStr = JOptionPane.showInputDialog("Ingrese la nueva fecha en formato YYYY-MM-DD:");
                    LocalDate fecha = LocalDate.parse(fechaStr);
            
                    // Solicitar la hora
                    String horaStr = JOptionPane.showInputDialog("Ingrese la nueva hora (solo se permiten horas completas o medias, por ejemplo, 7:00 AM o 7:30 PM):");
                    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("h:mm a", Locale.ENGLISH);
                    LocalTime hora = LocalTime.parse(horaStr, formatter);
            
                    // Mostrar la lista de servicios y solicitar el tipo de servicio
                    String listaServicios = control.listaServicio().toString();
                    String tipoElegido = JOptionPane.showInputDialog("Lista de servicios disponibles: \n" + listaServicios + "\nIngrese el nuevo tipo de servicio:");
            
                    Servicio servicio = control.getServicioPorNombre(tipoElegido);
                    control.modificarCitaExistente(numeroCita, fecha, hora, servicio);
                    
                    // Mostrar mensaje de confirmación
                    JOptionPane.showMessageDialog(null, "La cita ha sido modificada exitosamente.");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.");
                } catch (DateTimeParseException e) {
                    JOptionPane.showMessageDialog(null, "La fecha o la hora ingresada no es válida. Por favor, intente de nuevo.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al modificar la cita. Por favor, intente de nuevo.");
                }
            }
        });

        ConsCitaButton.setBackground(new java.awt.Color(19, 23, 25));
        ConsCitaButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        ConsCitaButton.setForeground(new java.awt.Color(177, 177, 177));
        ConsCitaButton.setText("Consultar Cita");

        ConsCitaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Solicitar el número de cita al usuario
                    String numeroCitaStr = JOptionPane.showInputDialog("Ingrese el número de la cita que desea consultar:");
                    
                    // Convertir el número de cita a int
                    int numeroCita = Integer.parseInt(numeroCitaStr);
            
                    // Llamar al método consultarCita
                    String resultadoConsulta = control.consultarCita(numeroCita);
            
                    // Mostrar el resultado de la consulta
                    JOptionPane.showMessageDialog(null, resultadoConsulta);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al consultar la cita. Por favor, intente de nuevo.");
                }
            }
        });

        ConfCitaButton.setBackground(new java.awt.Color(19, 23, 25));
        ConfCitaButton.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        ConfCitaButton.setForeground(new java.awt.Color(177, 177, 177));
        ConfCitaButton.setText("Confirmar Cita");

        ConfCitaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Mostrar la lista de citas y solicitar el número de cita
                    String listaCitas = control.listaCitas().toString();
                    String numeroCitaStr = JOptionPane.showInputDialog("Lista de citas disponibles: \n" + listaCitas + "\nIngrese el número de la cita que desea confirmar:");
                    
                    // Convertir el número de cita a int
                    int numeroCita = Integer.parseInt(numeroCitaStr);
        
                    // Llamar al método confirmarCita
                    control.confirmarCita(numeroCita);
                    
                    // Mostrar mensaje de confirmación
                    JOptionPane.showMessageDialog(null, "La cita ha sido confirmada exitosamente.");
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(null, "Por favor, ingrese un número válido.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al confirmar la cita. Por favor, intente de nuevo.");
                }
            }
        });

        CalCitaButton1.setBackground(new java.awt.Color(19, 23, 25));
        CalCitaButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        CalCitaButton1.setForeground(new java.awt.Color(177, 177, 177));
        CalCitaButton1.setText("Ver Calendario");

        CalCitaButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    // Solicitar la opción de visualización del calendario
                    String opcion = JOptionPane.showInputDialog("Ingrese la opción de visualización del calendario (Week o Month):");

                    // Solicitar la fecha de inicio
                    String fechaInicioStr = JOptionPane.showInputDialog("Ingrese la fecha de inicio en formato YYYY-MM-DD:");
                    LocalDate fechaInicio = LocalDate.parse(fechaInicioStr);

                    // Llamar al método verCalendarioCitas
                    Map<LocalDateTime, String> resultado = control.verCalendarioCitas(opcion, fechaInicio);

                    // Mostrar el resultado en un JOptionPane
                    JOptionPane.showMessageDialog(null, resultado.toString());
                } catch (DateTimeParseException e) {
                    JOptionPane.showMessageDialog(null, "La fecha ingresada no es válida. Por favor, intente de nuevo.");
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Ocurrió un error al visualizar el calendario. Por favor, intente de nuevo.");
                }
            }
        });

        jPanel3.setBackground(new java.awt.Color(29, 29, 29));
        jPanel3.setPreferredSize(new java.awt.Dimension(322, 85));

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(222, 222, 222));
        jLabel3.setText("Sección de Citas");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(413, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InsCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConsCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ConfCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                        .addComponent(CalCitaButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ModCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(DelCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InsCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DelCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ConsCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConfCitaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CalCitaButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(BackButton)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        MainFrame.getInstance().showPage("MainMenu");
    }//GEN-LAST:event_BackButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BackButton;
    private javax.swing.JButton CalCitaButton1;
    private javax.swing.JButton ConfCitaButton;
    private javax.swing.JButton ConsCitaButton;
    private javax.swing.JButton DelCitaButton;
    private javax.swing.JButton InsButton;
    private javax.swing.JButton InsCitaButton;
    private javax.swing.JButton ModCitaButton;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
